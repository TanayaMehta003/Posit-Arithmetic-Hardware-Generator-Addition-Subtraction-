// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module decoder_decoder_Pipeline_decoder_label0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num1_cast,
        p_Result_14,
        cnt1_out,
        cnt1_out_ap_vld,
        in_1_out,
        in_1_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] num1_cast;
input  [0:0] p_Result_14;
output  [4:0] cnt1_out;
output   cnt1_out_ap_vld;
output  [5:0] in_1_out;
output   in_1_out_ap_vld;
output  [0:0] ap_return;

reg ap_idle;
reg cnt1_out_ap_vld;
reg[5:0] in_1_out;
reg in_1_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] xor_ln951_fu_158_p2;
wire   [0:0] tmp_fu_122_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_96_p4;
reg   [5:0] in_1_fu_58;
wire   [5:0] in_1_3_fu_164_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_in_1_2;
reg   [4:0] cnt1_fu_62;
wire   [4:0] cnt1_2_fu_130_p2;
reg   [4:0] ap_sig_allocacmp_cnt1_1;
wire   [30:0] in_1_cast_fu_136_p1;
wire   [30:0] shl_ln961_fu_140_p2;
wire   [30:0] and_ln961_fu_146_p2;
wire   [0:0] p_Result_s_fu_152_p2;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

decoder_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & ((tmp_fu_122_p3 == 1'd1) | (xor_ln951_fu_158_p2 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_96_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if (((tmp_fu_122_p3 == 1'd0) & (xor_ln951_fu_158_p2 == 1'd0))) begin
            cnt1_fu_62 <= cnt1_2_fu_130_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            cnt1_fu_62 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if (((tmp_fu_122_p3 == 1'd0) & (xor_ln951_fu_158_p2 == 1'd0))) begin
            in_1_fu_58 <= in_1_3_fu_164_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            in_1_fu_58 <= 6'd30;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & ((tmp_fu_122_p3 == 1'd1) | (xor_ln951_fu_158_p2 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((tmp_fu_122_p3 == 1'd0) & (xor_ln951_fu_158_p2 == 1'd1))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_96_p4 = 1'd0;
        end else if ((tmp_fu_122_p3 == 1'd1)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_96_p4 = 1'd1;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_96_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_96_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & ((tmp_fu_122_p3 == 1'd1) | (xor_ln951_fu_158_p2 == 1'd1)))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_96_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_cnt1_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_cnt1_1 = cnt1_fu_62;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_in_1_2 = 6'd30;
    end else begin
        ap_sig_allocacmp_in_1_2 = in_1_fu_58;
    end
end

always @ (*) begin
    if ((((tmp_fu_122_p3 == 1'd0) & (xor_ln951_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((tmp_fu_122_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        cnt1_out_ap_vld = 1'b1;
    end else begin
        cnt1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((tmp_fu_122_p3 == 1'd1)) begin
            in_1_out = 6'd63;
        end else if (((tmp_fu_122_p3 == 1'd0) & (xor_ln951_fu_158_p2 == 1'd1))) begin
            in_1_out = ap_sig_allocacmp_in_1_2;
        end else begin
            in_1_out = 'bx;
        end
    end else begin
        in_1_out = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_fu_122_p3 == 1'd0) & (xor_ln951_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((tmp_fu_122_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        in_1_out_ap_vld = 1'b1;
    end else begin
        in_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln961_fu_146_p2 = (shl_ln961_fu_140_p2 & num1_cast);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cnt1_2_fu_130_p2 = (ap_sig_allocacmp_cnt1_1 + 5'd1);

assign cnt1_out = ap_sig_allocacmp_cnt1_1;

assign in_1_3_fu_164_p2 = ($signed(ap_sig_allocacmp_in_1_2) + $signed(6'd63));

assign in_1_cast_fu_136_p1 = ap_sig_allocacmp_in_1_2;

assign p_Result_s_fu_152_p2 = ((and_ln961_fu_146_p2 != 31'd0) ? 1'b1 : 1'b0);

assign shl_ln961_fu_140_p2 = 31'd1 << in_1_cast_fu_136_p1;

assign tmp_fu_122_p3 = ap_sig_allocacmp_in_1_2[32'd5];

assign xor_ln951_fu_158_p2 = (p_Result_s_fu_152_p2 ^ p_Result_14);

endmodule //decoder_decoder_Pipeline_decoder_label0
